package impl

import (
	"context"
	"fmt"

	"github.com/ahwhy/yCmdb/api/conf"
	"github.com/ahwhy/yCmdb/api/pkg/host"
	"github.com/ahwhy/yCmdb/api/pkg/resource"
	"github.com/ahwhy/yCmdb/api/pkg/secret"

	aliConn "github.com/ahwhy/yCmdb/api/provider/aliyun/connectivity"
	ecsOp "github.com/ahwhy/yCmdb/api/provider/aliyun/ecs"

	"github.com/infraboard/mcube/exception"
)

func (s *service) Sync(ctx context.Context, req *secret.SyncRequest) (*secret.SyncReponse, error) {
	var (
		resp *secret.SyncReponse
		err  error
	)

	if err := req.Validate(); err != nil {
		return nil, exception.NewBadRequest("validate sync request error, %s", err)
	}

	secret, err := s.DescribeSecret(ctx, secret.NewDescribeSecretRequest(req.SecretId))
	if err != nil {
		return nil, err
	}

	// 如果不是vsphere 需要检查region
	if !secret.Vendor.Equal(resource.VendorVsphere) {
		if req.Region == "" {
			return nil, exception.NewBadRequest("region required")
		}
		if !secret.IsAllowRegion(req.Region) {
			return nil, exception.NewBadRequest("this secret not allow sync region %s", req.Region)
		}
	}

	switch req.ResourceType {
	case resource.HostResource:
		resp, err = s.syncHost(ctx, secret, req.Region)
	case resource.RdsResource:
		// resp, err = s.syncRds(ctx, secret, req.Region)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *service) syncHost(ctx context.Context, secret *secret.Secret, region string) (*secret.SyncReponse, error) {
	var (
		pager host.Pager
	)

	// 解密secret
	err := secret.DecryptAPISecret(conf.C().App.EncryptKey)
	if err != nil {
		s.log.Warnf("decrypt api secret error, %s", err)
	}

	hs := host.NewHostSet()
	switch secret.Vendor {
	case resource.VendorAliYun:
		s.log.Debugf("sync aliyun host ...")

		client := aliConn.NewAliCloudClient(secret.APIKey, secret.APISecret, region)
		ec, err := client.EcsClient()
		if err != nil {
			return nil, err
		}

		operater := ecsOp.NewEcsOperater(ec)
		req := ecsOp.NewPageQueryRequest()
		req.Rate = secret.RequestRate
		pager = operater.PageQuery(req)

	case resource.VendorTencent:
		// s.log.Debugf("sync txyun host ...")

		// client := txConn.NewTencentCloudClient(secret.APIKey, secret.APISecret, region)
		// operater := cvmOp.NewCVMOperater(client.CvmClient())
		// pager = operater.PageQuery()

	case resource.VendorHuaWei:
		// s.log.Debugf("sync hwyun host ...")

		// client := hwConn.NewHuaweiCloudClient(secret.APIKey, secret.APISecret, region)
		// ec, err := client.EcsClient()
		// if err != nil {
		// 	return nil, err
		// }

		// operater := hwEcsOp.NewEcsOperater(ec)
		// pager = operater.PageQuery()

	case resource.VendorVsphere:
		// s.log.Debugf("sync vshpere host ...")

		// client := vsConn.NewVsphereClient(secret.Address, secret.APIKey, secret.APISecret)
		// ec, err := client.VimClient()
		// if err != nil {
		// 	return nil, err
		// }
		// operater := vmOp.NewVmOperater(ec)
		// hs, err = operater.Query()
		// if err != nil {
		// 	return nil, err
		// }

	default:

		return nil, exception.NewBadRequest("unsuport vendor %s", secret.Vendor)
	}

	set := secret.NewSyncReponse()
	// 分页查询数据
	if pager != nil {
		hasNext := true 
		for hasNext {
			p := pager.Next()
			hasNext = p.HasNext

			if p.Err != nil {
				return nil, fmt.Errorf("sync error, %s", p.Err)
			}

			// 调用host服务保持数据
			for i := range p.Data.Items {
				hs.Add(p.Data.Items[i])
			}
		}
	}

	// 调用host服务保持数据
	for i := range hs.Items {
		target := hs.Items[i]
		_, err := s.host.SaveHost(ctx, target)
		if err != nil {
			set.AddFailed(target.Name, err.Error())
		} else {
			set.AddSucceed(target.Name, "")
		}
	}

	return set, nil
}
